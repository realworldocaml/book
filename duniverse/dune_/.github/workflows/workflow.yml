name: CI

on:
  - push
  - pull_request
  - workflow_dispatch

concurrency:
  group: "${{ github.workflow }} @ ${{ github.event.pull_request.head.label || github.head_ref || github.ref }}"
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  build:
    name: Build
    strategy:
      fail-fast: false
      matrix:
        os:
          - macos-latest
          - ubuntu-latest
          - windows-latest
        # Please keep the list in sync with the minimal version of OCaml in
        # dune-project, dune.opam.template and bootstrap.ml
        #
        # We don't run tests on all versions of the Windows environment and on
        # 4.02.x and 4.07.x in other environments
        ocaml-compiler:
          - 4.14.x
        include:
          - ocaml-compiler: 4.13.x
            os: ubuntu-latest
            skip_test: true
          - ocaml-compiler: 4.08.x
            os: ubuntu-latest
            skip_test: true
          - ocaml-compiler: 4.04.x
            os: ubuntu-latest
            skip_test: true
            configurator: true
          - ocaml-compiler: 4.02.x
            os: ubuntu-latest
            skip_test: true

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Use OCaml ${{ matrix.ocaml-compiler }}
        uses: ocaml/setup-ocaml@v2
        with:
          ocaml-compiler: ${{ matrix.ocaml-compiler }}
          opam-depext: false

      # git user needs to be configured for the following tests:
      # otherlibs/build-info/test/run.t
      # test/blackbox-tests/test-cases/dune-project-meta/run.t
      # test/blackbox-tests/test-cases/subst/run.t
      # test/expect-tests/vcs_tests.ml
      - name: Set git user
        run: |
          git config --global user.name github-actions[bot]
          git config --global user.email github-actions[bot]@users.noreply.github.com

      # Install ocamlfind-secondary and ocaml-secondary-compiler, if needed
      - run: opam install ./dune.opam --deps-only --with-test

      - name: Install system deps on macOS
        run: brew install coreutils
        if: ${{ matrix.os == 'macos-latest' }}

      # dune doesn't have any additional dependencies so we can build it right
      # away this makes it possible to see build errors as soon as possible
      - run: opam exec -- make _boot/dune.exe

      # Ensure Dune can build itself
      - run: opam exec -- make bootstrap

      - name: Install deps on Unix
        run: |
          opam install . --deps-only --with-test
          opam exec -- make dev-deps
        if: ${{ matrix.os != 'windows-latest' && matrix.skip_test == false }}

      - name: Install deps on Win32
        run: opam install ./dune-configurator.opam --deps-only --with-test
        if: ${{ matrix.os == 'windows-latest' && matrix.skip_test == false }}

      - name: Run test suite on Unix
        run: opam exec -- make test
        if: ${{ matrix.os != 'windows-latest' && matrix.skip_test == false }}

      - name: Run test suite on Win32
        run: opam exec -- make test-windows
        if: ${{ matrix.os == 'windows-latest' && matrix.skip_test == false }}

      - name: Build configurator
        run: opam install ./dune-configurator.opam
        if: ${{ matrix.configurator == true }}

  nix:
    name: Nix
    strategy:
      fail-fast: false
      matrix:
        os:
          - macos-latest
          - ubuntu-latest
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
      - uses: cachix/install-nix-action@v18
      - run: nix build

  fmt:
    name: Format
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: cachix/install-nix-action@v18
      - run: nix develop .#fmt -c make fmt

  doc:
    name: Documentation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: cachix/install-nix-action@v18
      - run: nix develop .#doc -c make doc

  coq:
    name: Coq 8.16.0
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Use OCaml 4.14.x
        uses: ocaml/setup-ocaml@v2
        with:
          ocaml-compiler: 4.14.x
          opam-pin: false
          opam-depext: false
          dune-cache: true

      - name: Install Coq
        run: opam install coq.8.16.0 coq-native

      - run: opam exec -- make test-coq
        env:
          # We disable the Dune cache when running the tests
          DUNE_CACHE: disabled
